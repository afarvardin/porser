#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'porser/corpus/sentence_tokenizer'

module Porser
  module Corpus
    class SentenceParser < Racc::Parser

module_eval(<<'...end sentence_parser.y/module_eval...', 'sentence_parser.y', 27)
  def initialize(tokenizer_klass = SentenceTokenizer)
    @tokenizer_klass = tokenizer_klass
  end
  
  def parse(string)
    @tokenizer = @tokenizer_klass.new(string)
    yyparse(@tokenizer, :each)
    return @object
  ensure
    @tokenizer = nil
  end
...end sentence_parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     5,    11,    13,    10,     5,     8,     6,     7,    14,    15,
    16,    17 ]

racc_action_check = [
     9,     7,     9,     7,     0,     6,     1,     5,    10,    11,
    14,    16 ]

racc_action_pointer = [
     2,     6,   nil,   nil,   nil,     4,     5,    -2,   nil,    -2,
     5,     5,   nil,   nil,     7,   nil,     7,   nil ]

racc_action_default = [
    -9,    -9,    -1,    -2,    -3,    -9,    -9,    -5,    18,    -9,
    -9,    -9,    -4,    -6,    -9,    -8,    -9,    -7 ]

racc_goto_table = [
     2,     1,     9,   nil,   nil,   nil,   nil,   nil,   nil,    12 ]

racc_goto_check = [
     2,     1,     5,   nil,   nil,   nil,   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     1,     0,   nil,   nil,    -5 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 7, :_reduce_1,
  1, 8, :_reduce_2,
  1, 8, :_reduce_3,
  2, 11, :_reduce_4,
  0, 11, :_reduce_5,
  4, 9, :_reduce_6,
  6, 10, :_reduce_7,
  4, 10, :_reduce_8 ]

racc_reduce_n = 9

racc_shift_n = 18

racc_token_table = {
  false => 0,
  :error => 1,
  "(" => 2,
  :WORD => 3,
  ")" => 4,
  "-" => 5 }

racc_nt_base = 6

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"(\"",
  "WORD",
  "\")\"",
  "\"-\"",
  "$start",
  "sentence",
  "node",
  "category",
  "part_of_speech",
  "node_list" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'sentence_parser.y', 2)
  def _reduce_1(val, _values, result)
     @object = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'sentence_parser.y', 5)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'sentence_parser.y', 6)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'sentence_parser.y', 9)
  def _reduce_4(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'sentence_parser.y', 10)
  def _reduce_5(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'sentence_parser.y', 13)
  def _reduce_6(val, _values, result)
     result = Category.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'sentence_parser.y', 16)
  def _reduce_7(val, _values, result)
     result = PartOfSpeech.new(val[1], val[4], :lema => val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'sentence_parser.y', 17)
  def _reduce_8(val, _values, result)
     result = PartOfSpeech.new(val[1], val[2]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class SentenceParser
    end   # module Corpus
  end   # module Porser
